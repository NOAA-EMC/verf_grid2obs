      SUBROUTINE readcntl(numodel,numfcst,numvfdate,numvfyobs,numarea,
     +            numstat,numvarbl,numlevel,numvector)
C
      INCLUDE 'parm.inc'
C
      DIMENSION nchrmodel(maxmod), nchrfcst(mxfcst), nchrvfdate(mxdate),
     +            nchrvfyobs(maxobs), nchrarea(mxarea), 
     +            nchrstat(mxstat), nchrvarbl(mxvrbl), 
     +            nchrlevel(maxlvl)
      CHARACTER*24 namodel(maxmod), namfcst(mxfcst), 
     +            namvfdate(mxdate), namvfyobs(maxobs), 
     +            namarea(mxarea), namstat(mxstat), 
     +            namvarbl(mxvrbl), namlevel(maxlvl)
      CHARACTER*80 input
      character*80 msg
      character*10 a,b
      CHARACTER*10 substr (20)
C
      COMMON /names/ namodel, namfcst, namvfdate, namvfyobs, namarea, 
     +            namstat, namvarbl, namlevel
      COMMON /nchrs/ nchrmodel, nchrfcst, nchrvfdate, nchrvfyobs, 
     +            nchrarea, nchrstat, nchrvarbl, nchrlevel
      LOGICAL	  vtflg
      COMMON /cnvrsns/ vtflg, nmbgrd (maxmod), concon (maxmod),
     +		       cenlon (maxmod)


      integer pbsmrk(mxvrbl)
      CHARACTER*24 op(mxvrbl),pbsthr(mxvrbl,10)
      integer  nchrpbsthr(mxvrbl,10)
      real     rpbsthr(mxvrbl,10)
      COMMON /pbs/ pbsmrk,op,pbsthr,nchrpbsthr,rpbsthr

      CHARACTER*1 blank
      DATA blank /' '/


       pbsmrk = 0
       pbsthr = ''
       nchrpbsthr = 0
       rpbsthr = 0.0
C
C   READ NUMBER OF MODELS TO BE VERIFIED, first model name, and
C   optional wind rotation grid # for the model.
C
C   Note:  no adherence to format is necessary for this input.
C
        READ (5,'(A)') input
        CALL ST_CLST ( input, ' ', ' ', 3, substr, num, ier )
	CALL ST_NUMB ( substr (1), numodel, ier )
	CALL ST_RMBL ( substr (2), namodel (1), lng, ier )
	nchrmodel (1) = lng
	IF ( substr (3) .ne. ' ' ) THEN
	   CALL ST_NUMB ( substr (3), nmbgrd (1), ier )
	ELSE
	   nmbgrd (1) = -1
        END IF
C
C     NUMBER OF VERIFYING MODELS IS LIMITED TO MAXMOD
      IF (numodel.gt.maxmod) THEN
        write(a,'(i2)') maxmod
        write(b,'(i2)') numodel
        msg="  NUMBER OF VERIFYING MODELS EXCEEDS LIMIT OF " // a // b
        call errmsg(msg)
        call errexit(1)
      END IF
C     
C     READ NUMODEL MODEL PNEMONICS AND GET CHARACTER COUNT FOR EACH
C     Also read in optional wind rotation flag (false if missing).
C     
C   Note:  no adherence to format is necessary for this input.
C
      DO 30 n = 1, numodel
        IF ( n .ne. 1 ) THEN
	    READ (5,'(A)') input
      	    CALL ST_CLST ( input, ' ', ' ', 2, substr, num, ier )
	    CALL ST_RMBL ( substr (1), namodel (n), lng, ier )
	    nchrmodel (n) = lng
	    IF ( substr (2) .ne. ' ' ) THEN
	       CALL ST_NUMB ( substr (2), nmbgrd (n), ier )
	    ELSE
	       nmbgrd (n) = -1
            END IF
	END IF
	CALL SETMODEL(N,NAMODEL(N),NCHRMODEL(N))
	PRINT *, ' GRD # for wind rotation = ', nmbgrd (n)
   30 CONTINUE

        write (*,*) "read model done!"
C     
C     READ NUMBER OF FORECAST HOURS TO BE VERIFIED AND first hour.
C     
	CALL ST_READ  ( namfcst, nchrfcst, numfcst, iret )
	IF ( iret .ne. 0 ) THEN
         call errmsg('EOF encountered reading forecast hours.')
         call errexit(1)
	END IF
C
C*      NUMBER OF FORECAST HOURS IS LIMITED TO MXFCST
        IF (numfcst.gt.mxfcst) THEN
          write(a,'(i2)') maxmod
          write(b,'(i2)') numodel
          msg="  NUMBER OF FORECAST HOURS EXCEEDS LIMIT OF" // a // b
          call errmsg(msg)
          call errexit(1)
        END IF

C     
C       SET NUMFCST FORECAST HOUR PNEMONICS
C     
        DO 60 n = 1, numfcst
          CALL setfcst(n,namfcst(n),nchrfcst(n))
   60   CONTINUE

       write (*,*) "read fcst hour done!"

C     
C     READ NUMBER OF VERIFICATION DATES
C     
	CALL ST_READ  ( namvfdate, nchrvfdate, numvfdate, iret )
	IF ( iret .ne. 0 ) THEN
         call errmsg('End of file encountered reading verifying dates')
         call errexit(1)
	END IF
C
C*      NUMBER OF VERIFYING DATES IS LIMITED TO MXDATE
        IF (numvfdate.gt.mxdate) THEN
          write(a,'(i2)') mxdate
          write(b,'(i2)') numvfdate
          msg='NUMBER OF VERIFYING DATES EXCEEDS LIMIT OF' // a // b
          call errmsg(msg)
          call errexit(1)
        END IF

        write (*,*) "read verification dates  done!"

C     
C       READ NUMVFDATE VERIFICATION PNEMONICS AND GET CHARACTER COUNT
C     
C     READ NUMBER OF VERIFYING OB TYPES
C     
	CALL ST_READ  ( namvfyobs, nchrvfyobs, numvfyobs, iret )
	IF ( iret .ne. 0 ) THEN
            msg=' End of file encountered reading verifying ob types.'
            call errmsg(msg)
            call errexit(1)
	END IF
C
C*      NUMBER OF VERIFYING OBS IS LIMITED TO MAXOBS
        IF (numvfyobs.gt.maxobs) THEN
          write(a,'(i2)') maxobs
          write(b,'(i2)') numvfyobs
          msg='NUMBER OF VERIFYING OBS EXCEEDS LIMIT OF ' // a // b
          call errmsg(msg)
          call errexit(1)
        END IF
C     
C       SET NUMVFYOBS VERIFYING OBS PNEMONICS
C     
        DO 110 n = 1, numvfyobs
          CALL setobtyp(n,namvfyobs(n),nchrvfyobs(n))
  110   CONTINUE

        write (*,*) "read obstype done!"

C     
C     READ NUMBER OF VERIFICATION AREAS
C     
	CALL ST_READ  ( namarea, nchrarea, numarea, iret )
	IF ( iret .ne. 0 ) THEN
         call errmsg('EOF encountered reading verification areas')
         call errexit(1)
	END IF
C
C*      NUMBER OF VERIFYING AREAS IS LIMITED TO MXAREA
        IF (numarea.gt.mxarea) THEN
          write(a,'(i2)') mxarea
          write(b,'(i2)') numarea
          msg='NUMBER OF VERIFYING AREAS EXCEEDS LIMIT OF ' // a // b
          call errmsg(msg)
          call errexit(1)
        END IF
C     
C       SET NUMAREA DOMAIN PNEMONICS
C     
        DO 140 n = 1, numarea
          CALL setarea(n,namarea(n),nchrarea(n))
  140   CONTINUE

        write (*,*) "read area done!"

C     
C     READ NUMBER OF STATISTICAL SCORES
C     
	CALL ST_READ  ( namstat, nchrstat, numstat, iret )
	IF ( iret .ne. 0 ) THEN
         call errmsg('End of file encountered reading statistic types')
         call errexit(1)
	END IF
C
C       NUMBER OF STATISTICS IS LIMITED TO MXSTAT
        IF (numstat.gt.mxstat) THEN
          write(a,'(i2)') mxstat
          write(b,'(i2)') numstat
          msg='NUMBER OF STATISTICS EXCEEDS LIMIT OF ' // a // b
          call errmsg(msg)
          call errexit(1)
        END IF

       write (*,*) "read statics-type done!"

C     
C     READ VARIABLES TO BE VERIFIED
C     

c	CALL ST_READ  ( namvarbl, nchrvarbl, numvarbl, iret )
c	IF ( iret .ne. 0 ) THEN
c	    WRITE (6,*)
c     +		' End of file encountered reading parameters.'
c	    STOP
c	END IF

        READ (5, '(A)') input
        CALL ST_CLST( input, ' ', ' ', 10, substr, num, ier)
        CALL ST_NUMB( substr(1), numvarbl, ier)
        CALL ST_RMBL( substr(2), namvarbl(1), nchrvarbl(1), ier)

        write(*,*) numvarbl,namvarbl(1),num

         if (num.gt.3) then        !has PBS threholds
           CALL ST_RMBL( substr(3), op(1), n1, ier)
           pbsmrk(1)=num-3
           
           do nx = 4, num
            CALL ST_RMBL(substr(nx),pbsthr(1,nx-3),
     +               nchrpbsthr(1,nx-3),ier)
            rpbsthr(1,nx-3) = ChartoReal(pbsthr(1,nx-3))
           end do

         write(*,*) namvarbl(1),op(1),(rpbsthr(1,nx),nx=1,num-3)

          end if

        write (*,*) "read 1st variable done!"


       IF(numvarbl.GE.2) THEN
         DO n=2,numvarbl
           READ (5, '(A)') input
           CALL ST_CLST( input, ' ', ' ', 10, substr, num, ier)
           CALL ST_RMBL( substr(1), namvarbl(n), nchrvarbl(n), ier)

           write(*,*) namvarbl(n),num

           if (num.gt.2) then
             CALL ST_RMBL( substr(2), op(n), n1, ier)
             pbsmrk(n)=num-2

             do nx = 3, num
              CALL ST_RMBL(substr(nx),pbsthr(n,nx-2),
     +               nchrpbsthr(n,nx-2),ier)
              rpbsthr(n,nx-2) = ChartoReal(pbsthr(n,nx-2))
             end do

           write(*,*) namvarbl(n),op(n),(rpbsthr(n,nx),nx=1,num-2)

           end if

          END DO
        END IF

        write (*,*) "read 2nd variabels done!"


C
C       NUMBER OF VARIABLES IS LIMITED TO MXVRBL
        IF (numvarbl.gt.mxvrbl) THEN
          write(a,'(i2)') mxvrbl
          write(b,'(i2)') numvarbl
          msg='NUMBER OF VARIABLES EXCEEDS LIMIT OF ' // a // b
          call errmsg(msg)
          call errexit(1)
        END IF
C     
C       FIND VECTOR VARIABLE (must be last in list)
C     
        numvector = 0
	
	DO ivr = 1, numvarbl
          IF (nchrvarbl(ivr).eq.4.and.namvarbl(ivr).eq.'VWND') THEN
            numvector = ivr
	    IF ( numvector .ne. numvarbl ) THEN
              call errmsg('VWND must be last in parm list')
              call errexit(1)
	    END IF
            numvarbl = numvarbl + 1
            namvarbl(ivr+1) = namvarbl(ivr) (1:1)
            nchrvarbl(ivr+1) = 1
          END IF
	END DO
C     
C     READ NUMBER OF LEVEL DESCRIPTIONS
C     
	CALL ST_READ  ( namlevel, nchrlevel, numlevel, iret )
	IF ( iret .ne. 0 ) THEN
         call errmsg('End of file encountered reading verifying levels')
         call errexit(1)
	END IF
C
C*      NUMBER OF VERIFYING LEVELS IS LIMITED TO MAXLVL
        IF (numlevel.gt.maxlvl) THEN
          write(a,'(i2)') maxlvl
          write(b,'(i2)') numlevel
          msg='NUMBER OF VERIFYING LEVELS EXCEEDS LIMIT OF ' // a // b
          call errmsg(msg)
          call errexit(1)
        END IF
C     
C       READ NUMLEVEL LEVEL PNEMONICS AND GET CHARACTER COUNT
C     
        DO 220 n = 1, numlevel
          CALL setlevel(n,namlevel(n),nchrlevel(n))
  220   CONTINUE

        write (*,*) "read level done!"

        write (*,*) "readcntl  done!"

C*
      RETURN
      END
