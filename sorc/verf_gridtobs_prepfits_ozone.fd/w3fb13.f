       SUBROUTINE W3FB13(ALAT,ELON,ALAT1,ELON1,DX,ELONV,ALATAN1,
     &                   ALATAN2,XI,XJ)
C$$$   SUBPROGRAM  DOCUMENTATION  BLOCK
C
C SUBPROGRAM:  W3FB13        LAT/LON TO LAMBERT(I,J) FOR GRIB
C   PRGMMR: STACKPOLE        ORG: NMC42       DATE:88-11-28
C
C ABSTRACT: CONVERTS THE COORDINATES OF A LOCATION ON EARTH GIVEN IN
C   THE NATURAL COORDINATE SYSTEM OF LATITUDE/LONGITUDE TO A GRID
C   COORDINATE SYSTEM OVERLAID ON A LAMBERT CONFORMAL CONE
C   PROJECTION TRUE AT A GIVEN N OR S LATITUDE. W3FB13 IS THE REVERSE
C   OF W3FB14. USES GRIB SPECIFICATION OF THE LOCATION OF THE GRID
C
C PROGRAM HISTORY LOG:
C   88-11-25  ORIGINAL AUTHOR:  STACKPOLE, W/NMC42
C   90-04-12  R.E.JONES   CONVERT TO CFT77 FORTRAN
C   94-04-28  R.E.JONES   ADD SAVE STATEMENT
C 2003-06-21  GILBERT     MODIFIED FROM W3FB11 AND ADDED SUPPORT FOR
C                         SECANT CONE AS WELL AS TANGENTIAL.
C
C USAGE:  CALL W3FB13 (ALAT,ELON,ALAT1,ELON1,DX,ELONV,ALATAN1,ALATAN2,XI,XJ)
C   INPUT ARGUMENT LIST:
C     ALAT     - LATITUDE IN DEGREES (NEGATIVE IN SOUTHERN HEMIS)
C     ELON     - EAST LONGITUDE IN DEGREES, REAL*4
C     ALAT1    - LATITUDE  OF LOWER LEFT POINT OF GRID (POINT (1,1))
C     ELON1    - LONGITUDE OF LOWER LEFT POINT OF GRID (POINT (1,1))
C                ALL REAL*4
C     DX       - MESH LENGTH OF GRID IN METERS AT TANGENT LATITUDE
C     ELONV    - THE ORIENTATION OF THE GRID.  I.E.,
C                THE EAST LONGITUDE VALUE OF THE VERTICAL MERIDIAN
C                WHICH IS PARALLEL TO THE Y-AXIS (OR COLUMNS OF
C                OF THE GRID) ALONG WHICH LATITUDE INCREASES AS
C                THE Y-COORDINATE INCREASES.  REAL*4
C                THIS IS ALSO THE MERIDIAN (ON THE BACK SIDE OF THE
C                TANGENT CONE) ALONG WHICH THE CUT IS MADE TO LAY
C                THE CONE FLAT.
C     ALATAN1  - THE 1ST LATITUDE FROM THE POLE AT WHICH THE LAMBERT CONE 
C                INTERSECTS THE SPHERICAL EARTH.
C                SET NEGATIVE TO INDICATE A SOUTHERN HEMISPHERE PROJECTION.
C                (IF ALATAN1.EQ.ALATAN2 PROJECTION IS ON TANGENT CONE)
C     ALATAN2  - THE 2ND LATITUDE FROM THE POLE AT WHICH THE LAMBERT CONE 
C                INTERSECTS THE SPHERICAL EARTH.
C                SET NEGATIVE TO INDICATE A SOUTHERN HEMISPHERE PROJECTION.
C
C   OUTPUT ARGUMENT LIST:
C     XI       - I COORDINATE OF THE POINT SPECIFIED BY ALAT, ELON
C     XJ       - J COORDINATE OF THE POINT; BOTH REAL*4
C
C   REMARKS: FORMULAE AND NOTATION LOOSELY BASED ON HOKE, HAYES,
C     AND RENNINGER'S "MAP PROJECTIONS AND GRID SYSTEMS...", MARCH 1981
C     AFGWC/TN-79/003
C
C ATTRIBUTES:
C   LANGUAGE: CRAY CFT77 FORTRAN
C   MACHINE:  CRAY C916-128, CRAY Y-MP8/864, CRAY Y-MP EL2/256
C
C$$$
C
         SAVE
C
c        real*8 alat,elon
         DATA  RERTH /6.3712E+6/, PI/3.14159/
C
C        PRELIMINARY VARIABLES AND REDIFINITIONS
C
C        H = 1 FOR NORTHERN HEMISPHERE; = -1 FOR SOUTHERN
C
         IF (ALATAN1.GT.0) THEN
           H = 1.
         ELSE
           H = -1.
         ENDIF
C
         RADPD  = PI    / 180.0
         REBYDX = RERTH / DX
         ALATN1 = ALATAN1 * RADPD
         ALATN2 = ALATAN2 * RADPD
         IF (ALATAN1.EQ.ALATAN2) THEN
            AN     = H * SIN(ALATN1)
         ELSE
           AN=LOG(COS(ALATN1)/COS(ALATN2))/
     &        LOG(TAN(((H*PI/2.)-ALATN1)/2.)/TAN(((H*PI/2.)-ALATN2)/2.))
         ENDIF
         COSLTN = COS(ALATN2)
C
C        MAKE SURE THAT INPUT LONGITUDES DO NOT PASS THROUGH
C        THE CUT ZONE (FORBIDDEN TERRITORY) OF THE FLAT MAP
C        AS MEASURED FROM THE VERTICAL (REFERENCE) LONGITUDE.
C
         ELON1L = ELON1
         IF ((ELON1 - ELONV).GT.180.)
     &     ELON1L = ELON1 - 360.
         IF ((ELON1 - ELONV).LT.(-180.))
     &     ELON1L = ELON1 + 360.
C
         ELONL = ELON
         IF ((ELON  - ELONV).GT.180.)
     &     ELONL  = ELON  - 360.
         IF ((ELON - ELONV).LT.(-180.))
     &     ELONL = ELON + 360.
C
         ELONVR = ELONV * RADPD
C
C        RADIUS TO LOWER LEFT HAND (LL) CORNER
C
         ALA1 =  ALAT1 * RADPD
C         RMLL = REBYDX * (((COSLTN)**(1.-AN))*(1.+AN)**AN) *
C     &           (((COS(ALA1))/(1.+H*SIN(ALA1)))**AN)/AN
         PSI=(REBYDX*COSLTN)/(AN*(TAN((PI/4.)-(H*ALATN2/2.))**AN))
         RMLL=PSI*(TAN((PI/4.)-(H*ALA1/2.))**AN)
C
C        USE LL POINT INFO TO LOCATE POLE POINT
C
         ELO1 = ELON1L * RADPD
         ARG = AN * (ELO1-ELONVR)
         POLEI = 1. - H * RMLL * SIN(ARG)
         POLEJ = 1. + RMLL * COS(ARG)
C         print *,' The pole is at (I,J) = (',polei,',',polej,')'

C
C        RADIUS TO DESIRED POINT AND THE I J TOO
C
         ALA =  ALAT * RADPD
C         RM = REBYDX * ((COSLTN**(1.-AN))*(1.+AN)**AN) *
C     &           (((COS(ALA))/(1.+H*SIN(ALA)))**AN)/AN
C
         RM=PSI*(TAN((PI/4.)-(H*ALA/2.))**AN)
         ELO = ELONL * RADPD
         ARG = AN*(ELO-ELONVR)
         XI = POLEI + H * RM * SIN(ARG)
         XJ = POLEJ - RM * COS(ARG)
C
C        IF COORDINATE LESS THAN 1
C        COMPENSATE FOR ORIGIN AT (1,1)
C
         IF (NINT(XI).LT.1)  XI = XI - 1.
         IF (NINT(XJ).LT.1)  XJ = XJ - 1.
C
      RETURN
      END
